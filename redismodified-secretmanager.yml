Description: AWS ElatiCache for Redis Mode Demonstration

Parameters:

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: security groups from applications side/ this can be refer directly from output
  
  ProjectName:
    Type: String
    Default: aws-elasticache

  CacheNodeType:
    Type: String
    Default: cache.t3.micro
  EngineVersion:
    Description: 'Redis version'
    Type: String
    Default: '5.0.6'
    AllowedValues: # aws elasticache describe-cache-engine-versions --engine redis --query "CacheEngineVersions[].EngineVersion"
    - '3.2.6' # 3.2.4 and 3.2.10 do not support encryption
    - '4.0.10'
    - '5.0.0'
    - '5.0.3'
    - '5.0.4'
    - '5.0.5'
    - '5.0.6'
    - '6.x'
  AutomaticFailoverEnabled: 
    Description: 'Enable Automatic failover'
    Type: 'String'
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  TransitEncryptionEnabled:
    Description: 'Enable encryption for data in transit  
 #(see https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/in-transit-encryption.html)'
    Type: 'String'
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  NumShards:
    Description: 'Number of shards in the cluster.'
    Type: 'Number'
    Default: 1
    MinValue: 1
    MaxValue: 250
  NumReplicas:
    Description: 'Number of replicas per shard.'
    Type: 'Number'
    Default: 1
    MinValue: 0
    MaxValue: 5
  
  SubDomain:
    Description: subdomain Name
    Type: String
    MinLength: 3
    MaxLength: 8
    Default: redis
  HostedZone:
    Description: HostedZone Name
    #AllowedPattern: '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}'
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)[^\\.]$
    Type: String
    Default: internal.svc.local
 


Resources:
  RedisCache:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutoMinorVersionUpgrade: true
      AutomaticFailoverEnabled: !Ref AutomaticFailoverEnabled
      CacheParameterGroupName: default.redis5.0
      CacheNodeType: !Ref CacheNodeType
      CacheSubnetGroupName:  !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: !Ref EngineVersion
      Port: 6379
      TransitEncryptionEnabled: !Ref TransitEncryptionEnabled
      #Here RDS secret username and password will pick it up 
      AuthToken: !Join ['', ['{{resolve:secretsmanager:', !Ref RedisSecret, ':SecretString:password}}' ]]
      NumNodeGroups: !Ref NumShards
      ReplicasPerNodeGroup: !Ref NumReplicas
      ReplicationGroupDescription: Sample Redis group for scaling
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
          
  RedisSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: RedisSecret
      Description: "This secret has a dynamically generated secret password and username."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "SingtelRedis"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
             
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis subnet group
      SubnetIds:
        - !ImportValue PrivateSubnet1
        - !ImportValue PrivateSubnet2
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC
      GroupDescription: Enable Redis access 
  SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress" 
    Properties:
      GroupId: !GetAtt [RedisSecurityGroup, GroupId]
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
          
  #DnsRedis:
   # Type: 'AWS::Route53::RecordSetGroup'
   # Properties:
    #  HostedZoneName: 'a.hosted.zone.name.'
    #  RecordSets:
     #   - Name: 'a.record.set.name'
     #     Type: CNAME
      #    TTL: '300'
       #   ResourceRecords:
         #   - !GetAtt
          #    - RedisCache
           #   - PrimaryEndPoint.Address  
    #DependsOn: RedisCache


  redisRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ["", [!Ref HostedZone, .]]
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
        - Name: !Join [".", [!Ref SubDomain, !Ref HostedZone]]
          Type: CNAME
          TTL: '300' 
          ResourceRecords: 
            - !GetAtt [RedisCache, PrimaryEndPoint.Address ]
          
            
    
Outputs:
  URL:
    Description:  Newly created Elasticache Redis cluster Mode Demonstration
    Value: !Ref RedisCache
  DNS:
    Description: "DNS of the Redis Cache"
    Value: !Ref redisRoute53RecordSetGroup
