Description: Create RDS for Microsoft SQL Server
Parameters:
  DBInstanceClass:
    Description: Allowed instance types for RDS
    Type: String
    Default: db.t3.small
    AllowedValues:
      - db.t2.small
      - db.t2.large
      - db.t2.xlarge
      - db.t3.small
      - db.t3.large
      - db.t3.xlarge
    ConstraintDescription: must be a valid db instance type
  Engine:
    Description: Allowed engine type for RDS
    Type: String
    Default: sqlserver-web
    AllowedValues:
      - sqlserver-ee
      - sqlserver-se
      - sqlserver-ex
      - sqlserver-web
    ConstraintDescription: must be a valid db engine type
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: security groups from applications side/ this can be refer directly from output
Resources:
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref Engine
      #Here RDS secret username and password will pick it up 
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:password}}' ]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      
  #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
  #the referenced RDS instance
  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSInstance
      TargetType: AWS::RDS::DBInstance
      
    #This secret has a dynamically generated secret password and username    
  RDSSecrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecretForApp
      Description: "This secret has a dynamically generated secret password and username."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Singtel"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
    Tags:
      -
        Key: Name
        Value: RDSSecret

  
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !ImportValue PrivateSubnet1
        - !ImportValue PrivateSubnet2
  DBEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
     VpcId: !ImportValue VPC
     GroupDescription: Database port access
  DBEC2SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt [DBEC2SecurityGroup, GroupId]
      IpProtocol: tcp
      FromPort: "1433"
      ToPort: "1433"
      SourceSecurityGroupId: !Ref WebServerSecurityGroup

Outputs:
  InstanceId:
    Description: InstanceId of the newly created RDS Instance
    Value: !Ref RDS
